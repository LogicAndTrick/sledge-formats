using System;
using System.IO;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Sledge.Formats.Map.Formats;
using Sledge.Formats.Map.Objects;
using Sledge.Formats.Precision;

namespace Sledge.Formats.Map.Tests.Units;

[TestClass]
public class TestCounterClockwiseOrdering
{
    private const string CubeMap = "ew0KImNsYXNzbmFtZSIgIndvcmxkc3Bhd24iDQoibWFwdmVyc2lvbiIgIjIyMCINCiJ3YWQiICJcU3RlYW1cU3RlYW1BcHBzXGNvbW1vblxIYWxmLUxpZmVcdmFsdmVcaGFsZmxpZmUud2FkO1xTdGVhbVxTdGVhbUFwcHNcY29tbW9uXEhhbGYtTGlmZVx2YWx2ZVxsaXF1aWRzLndhZDtcU3RlYW1cU3RlYW1BcHBzXGNvbW1vblxIYWxmLUxpZmVcdmFsdmVceGVuby53YWQ7XFN0ZWFtXFN0ZWFtQXBwc1xjb21tb25cSGFsZi1MaWZlXHZhbHZlXGRlY2Fscy53YWQ7XFByb2dyYW0gRmlsZXNcSmFja2hhbW1lclxoYWxmbGlmZVx6aGx0LndhZCINCiJfZ2VuZXJhdG9yIiAiSi5BLkMuSy4gMS4xLjEwNjQgKHZwSGFsZkxpZmUpIg0Kew0KKCAxNDQgMCAtMCApICggMTQ0IDAgMTYgKSAoIDE0NCAxNiAwICkgRklGVElFU19XQUxMMTJEIFsgMCAxIDAgMCBdIFsgMCAwIC0xIDAgXSAwIDEgMQ0KKCAxMjggMTYgLTAgKSAoIDEyOCAxNiAxNiApICggMTI4IDAgMCApIEZJRlRJRVNfV0FMTDEyRCBbIDAgLTEgMCAwIF0gWyAwIDAgLTEgMCBdIDAgMSAxDQooIDE0NCAxNiAwICkgKCAxNDQgMTYgMTYgKSAoIDEyOCAxNiAwICkgRklGVElFU19XQUxMMTJEIFsgLTEgMCAwIDAgXSBbIDAgMCAtMSAwIF0gMCAxIDENCiggMTI4IDAgMCApICggMTI4IDAgMTYgKSAoIDE0NCAwIC0wICkgRklGVElFU19XQUxMMTJEIFsgMSAwIDAgMCBdIFsgMCAwIC0xIDAgXSAwIDEgMQ0KKCAxMjggMCAwICkgKCAxNDQgMCAwICkgKCAxMjggMTYgMCApIEZJRlRJRVNfV0FMTDEyRCBbIC0xIDAgMCAwIF0gWyAwIC0xIDAgMCBdIDAgMSAxDQooIDE0NCAwIDE2ICkgKCAxMjggMCAxNiApICggMTQ0IDE2IDE2ICkgRklGVElFU19XQUxMMTJEIFsgMSAwIDAgMCBdIFsgMCAtMSAwIDAgXSAwIDEgMQ0KfQ0KfQ0K";
    
    [TestMethod]
    public void TestMapToMap()
    {
        var rmf = new QuakeMapFormat();
        using var stream = new MemoryStream(Convert.FromBase64String(CubeMap));
        var map = rmf.Read(stream);
        var cube = (Solid) map.Worldspawn.Children[0];
        var poly = new Polyhedrond(cube.Faces.Select(x => new Planed(x.Plane.Normal.ToVector3d(), x.Plane.D)));

        Assert.AreEqual(cube.Faces.Count, poly.Polygons.Count);
        foreach (var origFace in cube.Faces)
        {
            var newFace = poly.Polygons.Single(x => x.Plane.EquivalentTo(new Planed(origFace.Plane.Normal.ToVector3d(), origFace.Plane.D)));
            var firstVertexIndex = newFace.Vertices.ToList().FindIndex(x => x.EquivalentTo(origFace.Vertices[0].ToVector3d()));
            for (var origIndex = 0; origIndex < origFace.Vertices.Count; origIndex++)
            {
                var newIndex = (firstVertexIndex + origIndex) % origFace.Vertices.Count;
                var ov = origFace.Vertices[origIndex].ToVector3d();
                var nv = newFace.Vertices[newIndex];
                Assert.IsTrue(ov.EquivalentTo(nv), $"{ov}.EquivalentTo({nv})");
            }
        }
    }

    private const string CubeRmf = "zcwMQFJNRgAAAAAKQ01hcFdvcmxkAAAAAAD///8BAAAACkNNYXBTb2xpZAAAAAAAAIH/AAAAAAYAAABmaWZ0aWVzX3dhbGwxMmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgL8AAAAAAAAAAAAAgD8AAIA/AAAAAAAAAAAAAAAAAAAAAAQAAAAAABBDAAAAAAAAgEEAABBDAAAAAAAAAIAAAABDAAAAAAAAAAAAAABDAAAAAAAAgEEAABBDAAAAAAAAgEEAABBDAAAAAAAAAIAAAABDAAAAAAAAAABmaWZ0aWVzX3dhbGwxMmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgL8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgL8AAAAAAAAAAAAAgD8AAIA/AAAAAAAAAAAAAAAAAAAAAAQAAAAAAABDAACAQQAAgEEAAABDAACAQQAAAAAAABBDAACAQQAAAAAAABBDAACAQQAAgEEAAABDAACAQQAAgEEAAABDAACAQQAAAAAAABBDAACAQQAAAABmaWZ0aWVzX3dhbGwxMmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIC/AAAAAAAAAAAAAAAAAAAAAAAAgL8AAAAAAAAAAAAAgD8AAIA/AAAAAAAAAAAAAAAAAAAAAAQAAAAAAABDAAAAAAAAgEEAAABDAAAAAAAAAAAAAABDAACAQQAAAIAAAABDAACAQQAAgEEAAABDAAAAAAAAgEEAAABDAAAAAAAAAAAAAABDAACAQQAAAIBmaWZ0aWVzX3dhbGwxMmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgL8AAAAAAAAAAAAAgD8AAIA/AAAAAAAAAAAAAAAAAAAAAAQAAAAAABBDAACAQQAAgEEAABBDAACAQQAAAAAAABBDAAAAAAAAAIAAABBDAAAAAAAAgEEAABBDAACAQQAAgEEAABBDAACAQQAAAAAAABBDAAAAAAAAAIBmaWZ0aWVzX3dhbGwxMmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAvwAAAAAAAAAAAAAAAAAAgD8AAIA/AAAAAAAAAAAAAAAAAAAAAAQAAAAAAABDAACAQQAAgEEAABBDAACAQQAAgEEAABBDAAAAAAAAgEEAAABDAAAAAAAAgEEAAABDAACAQQAAgEEAABBDAACAQQAAgEEAABBDAAAAAAAAgEFmaWZ0aWVzX3dhbGwxMmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgL8AAAAAAAAAAAAAAAAAAAAAAACAvwAAAAAAAAAAAAAAAAAAgD8AAIA/AAAAAAAAAAAAAAAAAAAAAAQAAAAAABBDAACAQQAAAAAAAABDAACAQQAAAAAAAABDAAAAAAAAAAAAABBDAAAAAAAAAAAAABBDAACAQQAAAAAAAABDAACAQQAAAAAAAABDAAAAAAAAAAALd29ybGRzcGF3bgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    
    [TestMethod]
    public void TestRmfToMap()
    {
        var rmf = new WorldcraftRmfFormat();
        using var stream = new MemoryStream(Convert.FromBase64String(CubeRmf));
        var map = rmf.Read(stream);
        var cube = (Solid) map.Worldspawn.Children[0];
        var poly = new Polyhedrond(cube.Faces.Select(x => new Planed(x.Plane.Normal.ToVector3d(), x.Plane.D)));

        Assert.AreEqual(cube.Faces.Count, poly.Polygons.Count);
        foreach (var origFace in cube.Faces)
        {
            var newFace = poly.Polygons.Single(x => x.Plane.EquivalentTo(new Planed(origFace.Plane.Normal.ToVector3d(), origFace.Plane.D)));
            var firstVertexIndex = newFace.Vertices.ToList().FindIndex(x => x.EquivalentTo(origFace.Vertices[0].ToVector3d()));
            for (var origIndex = 0; origIndex < origFace.Vertices.Count; origIndex++)
            {
                var newIndex = (firstVertexIndex + origIndex) % origFace.Vertices.Count;
                var ov = origFace.Vertices[origIndex].ToVector3d();
                var nv = newFace.Vertices[newIndex];
                Assert.IsTrue(ov.EquivalentTo(nv), $"{ov}.EquivalentTo({nv})");
            }
        }
    }

    private const string CubeVmf = "dmVyc2lvbmluZm8NCnsNCgkiZWRpdG9ydmVyc2lvbiIgIjQwMCINCgkiZWRpdG9yYnVpbGQiICI5NTIwIg0KCSJtYXB2ZXJzaW9uIiAiMCINCgkiZm9ybWF0dmVyc2lvbiIgIjEwMCINCgkicHJlZmFiIiAiMCINCn0NCnZpZXdzZXR0aW5ncw0Kew0KCSJiU25hcFRvR3JpZCIgIjEiDQoJImJTaG93R3JpZCIgIjEiDQoJImJTaG93TG9naWNhbEdyaWQiICIwIg0KCSJuR3JpZFNwYWNpbmciICI2NCINCgkiYlNob3czREdyaWQiICIwIg0KfQ0Kd29ybGQNCnsNCgkiaWQiICIwIg0KCSJtYXB2ZXJzaW9uIiAiMCINCgkiY2xhc3NuYW1lIiAid29ybGRzcGF3biINCgkic3Bhd25mbGFncyIgIjAiDQoJInNreW5hbWUiICJza3lfZGF5MDFfMDEiDQoJIm1heHByb3BzY3JlZW53aWR0aCIgIi0xIg0KCSJkZXRhaWx2YnNwIiAiZGV0YWlsLnZic3AiDQoJImRldGFpbG1hdGVyaWFsIiAiZGV0YWlsL2RldGFpbHNwcml0ZXMiDQoJc29saWQNCgl7DQoJCSJpZCIgIjEiDQoJCXNpZGUNCgkJew0KCQkJImlkIiAiMSINCgkJCSJwbGFuZSIgIigxNDQgMCAxNikgKDE0NCAwIC0wKSAoMTI4IDAgMCkiDQoJCQkibWF0ZXJpYWwiICJGSUZUSUVTX1dBTEwxMkQiDQoJCQkidWF4aXMiICJbMSAwIDAgMF0gMSINCgkJCSJ2YXhpcyIgIlswIDAgLTEgMF0gMSINCgkJCSJyb3RhdGlvbiIgIjAiDQoJCQkibGlnaHRtYXBzY2FsZSIgIjE2Ig0KCQkJInNtb290aGluZ19ncm91cHMiICIwIg0KCQl9DQoJCXNpZGUNCgkJew0KCQkJImlkIiAiMiINCgkJCSJwbGFuZSIgIigxMjggMTYgMTYpICgxMjggMTYgMCkgKDE0NCAxNiAwKSINCgkJCSJtYXRlcmlhbCIgIkZJRlRJRVNfV0FMTDEyRCINCgkJCSJ1YXhpcyIgIlstMSAwIDAgMF0gMSINCgkJCSJ2YXhpcyIgIlswIDAgLTEgMF0gMSINCgkJCSJyb3RhdGlvbiIgIjAiDQoJCQkibGlnaHRtYXBzY2FsZSIgIjE2Ig0KCQkJInNtb290aGluZ19ncm91cHMiICIwIg0KCQl9DQoJCXNpZGUNCgkJew0KCQkJImlkIiAiMyINCgkJCSJwbGFuZSIgIigxMjggMCAxNikgKDEyOCAwIDApICgxMjggMTYgLTApIg0KCQkJIm1hdGVyaWFsIiAiRklGVElFU19XQUxMMTJEIg0KCQkJInVheGlzIiAiWzAgLTEgMCAwXSAxIg0KCQkJInZheGlzIiAiWzAgMCAtMSAwXSAxIg0KCQkJInJvdGF0aW9uIiAiMCINCgkJCSJsaWdodG1hcHNjYWxlIiAiMTYiDQoJCQkic21vb3RoaW5nX2dyb3VwcyIgIjAiDQoJCX0NCgkJc2lkZQ0KCQl7DQoJCQkiaWQiICI0Ig0KCQkJInBsYW5lIiAiKDE0NCAxNiAxNikgKDE0NCAxNiAwKSAoMTQ0IDAgLTApIg0KCQkJIm1hdGVyaWFsIiAiRklGVElFU19XQUxMMTJEIg0KCQkJInVheGlzIiAiWzAgMSAwIDBdIDEiDQoJCQkidmF4aXMiICJbMCAwIC0xIDBdIDEiDQoJCQkicm90YXRpb24iICIwIg0KCQkJImxpZ2h0bWFwc2NhbGUiICIxNiINCgkJCSJzbW9vdGhpbmdfZ3JvdXBzIiAiMCINCgkJfQ0KCQlzaWRlDQoJCXsNCgkJCSJpZCIgIjUiDQoJCQkicGxhbmUiICIoMTI4IDE2IDE2KSAoMTQ0IDE2IDE2KSAoMTQ0IDAgMTYpIg0KCQkJIm1hdGVyaWFsIiAiRklGVElFU19XQUxMMTJEIg0KCQkJInVheGlzIiAiWzEgMCAwIDBdIDEiDQoJCQkidmF4aXMiICJbMCAtMSAwIDBdIDEiDQoJCQkicm90YXRpb24iICIwIg0KCQkJImxpZ2h0bWFwc2NhbGUiICIxNiINCgkJCSJzbW9vdGhpbmdfZ3JvdXBzIiAiMCINCgkJfQ0KCQlzaWRlDQoJCXsNCgkJCSJpZCIgIjYiDQoJCQkicGxhbmUiICIoMTQ0IDE2IDApICgxMjggMTYgMCkgKDEyOCAwIDApIg0KCQkJIm1hdGVyaWFsIiAiRklGVElFU19XQUxMMTJEIg0KCQkJInVheGlzIiAiWy0xIDAgMCAwXSAxIg0KCQkJInZheGlzIiAiWzAgLTEgMCAwXSAxIg0KCQkJInJvdGF0aW9uIiAiMCINCgkJCSJsaWdodG1hcHNjYWxlIiAiMTYiDQoJCQkic21vb3RoaW5nX2dyb3VwcyIgIjAiDQoJCX0NCgkJZWRpdG9yDQoJCXsNCgkJCSJjb2xvciIgIjAgMTI5IDI1NSINCgkJCSJ2aXNncm91cHNob3duIiAiMSINCgkJCSJ2aXNncm91cGF1dG9zaG93biIgIjEiDQoJCX0NCgl9DQp9DQpjYW1lcmFzDQp7DQoJImFjdGl2ZWNhbWVyYSIgIi0xIg0KfQ0KY29yZG9uDQp7DQoJIm1pbnMiICIoLTEwMjQgLTEwMjQgLTEwMjQpIg0KCSJtYXhzIiAiKDEwMjQgMTAyNCAxMDI0KSINCgkiYWN0aXZlIiAiMCINCn0NCg==";

    [TestMethod]
    public void TestVmfToMap()
    {
        var rmf = new HammerVmfFormat();
        using var stream = new MemoryStream(Convert.FromBase64String(CubeVmf));
        var map = rmf.Read(stream);
        var cube = (Solid) map.Worldspawn.Children[0];
        var poly = new Polyhedrond(cube.Faces.Select(x => new Planed(x.Plane.Normal.ToVector3d(), x.Plane.D)));

        Assert.AreEqual(cube.Faces.Count, poly.Polygons.Count);
        foreach (var origFace in cube.Faces)
        {
            var newFace = poly.Polygons.Single(x => x.Plane.EquivalentTo(new Planed(origFace.Plane.Normal.ToVector3d(), origFace.Plane.D)));
            var firstVertexIndex = newFace.Vertices.ToList().FindIndex(x => x.EquivalentTo(origFace.Vertices[0].ToVector3d()));
            for (var origIndex = 0; origIndex < origFace.Vertices.Count; origIndex++)
            {
                var newIndex = (firstVertexIndex + origIndex) % origFace.Vertices.Count;
                var ov = origFace.Vertices[origIndex].ToVector3d();
                var nv = newFace.Vertices[newIndex];
                Assert.IsTrue(ov.EquivalentTo(nv), $"{ov}.EquivalentTo({nv})");
            }
        }
    }

    private const string CubeJmf = "SkhNRnkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAB3b3JsZHNwYXduAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAA/////woAAABzcGF3bmZsYWdzBgAAAG9yaWdpbgYAAABhbmdsZXMFAAAAc2NhbGUKAAAAdGFyZ2V0bmFtZQYAAAB0YXJnZXQHAAAAc2t5bmFtZQUAAABtb2RlbAUAAABtb2RlbAcAAAB0ZXh0dXJlBQAAAG1vZGVsBQAAAG1vZGVsBgAAAHNjcmlwdAAAAAAAAAAAAAAAAAAAAAAAAQAA/////wAAAAAAAAAAAAAAAAAAAAAAACBBAACAPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAIAvAP8AAAAABgAAAAAAAAAEAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAvwAAAAAAAIA/AACAPwAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAEZJRlRJRVNfV0FMTDEyRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAIAAABBDAAAAAAAAEEMAAAAAAACAQQAAAAAAAAA/AAAAAAAAEEMAAAAAAAAAgAAAAAAAAIA/AAAAAAAAEEMAAIBBAAAAAAAAAD8AAIA/AAAAAAAAEEMAAIBBAACAQQAAAD8AAAA/AAAAAAAAAAAEAAAAAAAAAAAAgL8AAAAAAAAAAAAAAAAAAAAAAACAvwAAAAAAAIA/AACAPwAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAEZJRlRJRVNfV0FMTDEyRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIC/AAAAAAAAAAAAAADDAAAAAAAAAEMAAIBBAACAQQAAAD8AAAA/AAAAAAAAAEMAAIBBAAAAgAAAAD8AAIA/AAAAAAAAAEMAAAAAAAAAAAAAgD8AAIA/AAAAAAAAAEMAAAAAAACAQQAAgD8AAAA/AAAAAAAAAAAEAAAAAACAvwAAAAAAAAAAAAAAAAAAAAAAAAAAAACAvwAAAAAAAIA/AACAPwAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAEZJRlRJRVNfV0FMTDEyRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAIBBAQAAAAAAEEMAAIBBAACAQQAAAD8AAAA/AAAAAAAAEEMAAIBBAAAAAAAAAD8AAIA/AAAAAAAAAEMAAIBBAAAAAAAAgD8AAIA/AAAAAAAAAEMAAIBBAACAQQAAgD8AAAA/AAAAAAAAAAAEAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAAAAAACAvwAAAAAAAIA/AACAPwAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAEZJRlRJRVNfV0FMTDEyRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAvwAAAAAAAAAAAQAAAAAAAEMAAAAAAACAQQAAAAAAAAA/AAAAAAAAAEMAAAAAAAAAAAAAAAAAAIA/AAAAAAAAEEMAAAAAAAAAgAAAAD8AAIA/AAAAAAAAEEMAAAAAAACAQQAAAD8AAAA/AAAAAAAAAAAEAAAAAACAvwAAAAAAAAAAAAAAAAAAAAAAAIC/AAAAAAAAAAAAAIA/AACAPwAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAEZJRlRJRVNfV0FMTDEyRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgL8AAAAAAgAAAAAAEEMAAAAAAAAAAAAAAD8AAIA/AAAAAAAAAEMAAAAAAAAAAAAAgD8AAIA/AAAAAAAAAEMAAIBBAAAAAAAAgD8AAAA/AAAAAAAAEEMAAIBBAAAAAAAAAD8AAAA/AAAAAAAAAAAEAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIC/AAAAAAAAAAAAAIA/AACAPwAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAEZJRlRJRVNfV0FMTDEyRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgD8AAIBBAgAAAAAAAEMAAAAAAACAQQAAAAAAAIA/AAAAAAAAEEMAAAAAAACAQQAAAD8AAIA/AAAAAAAAEEMAAIBBAACAQQAAAD8AAAA/AAAAAAAAAEMAAIBBAACAQQAAAAAAAAA/AAAAAA==";

    [TestMethod]
    public void TestJmfToMap()
    {
        var rmf = new JackhammerJmfFormat();
        using var stream = new MemoryStream(Convert.FromBase64String(CubeJmf));
        var map = rmf.Read(stream);
        var cube = (Solid) map.Worldspawn.Children[0];
        var poly = new Polyhedrond(cube.Faces.Select(x => new Planed(x.Plane.Normal.ToVector3d(), x.Plane.D)));

        Assert.AreEqual(cube.Faces.Count, poly.Polygons.Count);
        foreach (var origFace in cube.Faces)
        {
            var newFace = poly.Polygons.Single(x => x.Plane.EquivalentTo(new Planed(origFace.Plane.Normal.ToVector3d(), origFace.Plane.D)));
            var firstVertexIndex = newFace.Vertices.ToList().FindIndex(x => x.EquivalentTo(origFace.Vertices[0].ToVector3d()));
            for (var origIndex = 0; origIndex < origFace.Vertices.Count; origIndex++)
            {
                var newIndex = (firstVertexIndex + origIndex) % origFace.Vertices.Count;
                var ov = origFace.Vertices[origIndex].ToVector3d();
                var nv = newFace.Vertices[newIndex];
                Assert.IsTrue(ov.EquivalentTo(nv), $"{ov}.EquivalentTo({nv})");
            }
        }
    }
}